/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.wiremock.demos.simple_payments_sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import io.wiremock.demos.simple_payments_sdk.utils.SpeakeasyMetadata;
import io.wiremock.demos.simple_payments_sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;

public class GetChargesByChargeIdRequest {

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=chargeId")
    private String chargeId;

    @JsonCreator
    public GetChargesByChargeIdRequest(
            String chargeId) {
        Utils.checkNotNull(chargeId, "chargeId");
        this.chargeId = chargeId;
    }

    @JsonIgnore
    public String chargeId() {
        return chargeId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public GetChargesByChargeIdRequest withChargeId(String chargeId) {
        Utils.checkNotNull(chargeId, "chargeId");
        this.chargeId = chargeId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetChargesByChargeIdRequest other = (GetChargesByChargeIdRequest) o;
        return 
            java.util.Objects.deepEquals(this.chargeId, other.chargeId);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            chargeId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetChargesByChargeIdRequest.class,
                "chargeId", chargeId);
    }
    
    public final static class Builder {
 
        private String chargeId;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder chargeId(String chargeId) {
            Utils.checkNotNull(chargeId, "chargeId");
            this.chargeId = chargeId;
            return this;
        }
        
        public GetChargesByChargeIdRequest build() {
            return new GetChargesByChargeIdRequest(
                chargeId);
        }
    }
}

