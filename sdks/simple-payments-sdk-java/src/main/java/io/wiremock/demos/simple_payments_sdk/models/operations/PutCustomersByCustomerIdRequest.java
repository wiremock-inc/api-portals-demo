/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.wiremock.demos.simple_payments_sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import io.wiremock.demos.simple_payments_sdk.utils.SpeakeasyMetadata;
import io.wiremock.demos.simple_payments_sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;


public class PutCustomersByCustomerIdRequest {

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=customerId")
    private String customerId;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=detail")
    private QueryParamDetail detail;

    @SpeakeasyMetadata("request:mediaType=application/json")
    private PutCustomersByCustomerIdRequestBody requestBody;

    @JsonCreator
    public PutCustomersByCustomerIdRequest(
            String customerId,
            QueryParamDetail detail,
            PutCustomersByCustomerIdRequestBody requestBody) {
        Utils.checkNotNull(customerId, "customerId");
        Utils.checkNotNull(detail, "detail");
        Utils.checkNotNull(requestBody, "requestBody");
        this.customerId = customerId;
        this.detail = detail;
        this.requestBody = requestBody;
    }

    @JsonIgnore
    public String customerId() {
        return customerId;
    }

    @JsonIgnore
    public QueryParamDetail detail() {
        return detail;
    }

    @JsonIgnore
    public PutCustomersByCustomerIdRequestBody requestBody() {
        return requestBody;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public PutCustomersByCustomerIdRequest withCustomerId(String customerId) {
        Utils.checkNotNull(customerId, "customerId");
        this.customerId = customerId;
        return this;
    }

    public PutCustomersByCustomerIdRequest withDetail(QueryParamDetail detail) {
        Utils.checkNotNull(detail, "detail");
        this.detail = detail;
        return this;
    }

    public PutCustomersByCustomerIdRequest withRequestBody(PutCustomersByCustomerIdRequestBody requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = requestBody;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PutCustomersByCustomerIdRequest other = (PutCustomersByCustomerIdRequest) o;
        return 
            java.util.Objects.deepEquals(this.customerId, other.customerId) &&
            java.util.Objects.deepEquals(this.detail, other.detail) &&
            java.util.Objects.deepEquals(this.requestBody, other.requestBody);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            customerId,
            detail,
            requestBody);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PutCustomersByCustomerIdRequest.class,
                "customerId", customerId,
                "detail", detail,
                "requestBody", requestBody);
    }
    
    public final static class Builder {
 
        private String customerId;
 
        private QueryParamDetail detail;
 
        private PutCustomersByCustomerIdRequestBody requestBody;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder customerId(String customerId) {
            Utils.checkNotNull(customerId, "customerId");
            this.customerId = customerId;
            return this;
        }

        public Builder detail(QueryParamDetail detail) {
            Utils.checkNotNull(detail, "detail");
            this.detail = detail;
            return this;
        }

        public Builder requestBody(PutCustomersByCustomerIdRequestBody requestBody) {
            Utils.checkNotNull(requestBody, "requestBody");
            this.requestBody = requestBody;
            return this;
        }
        
        public PutCustomersByCustomerIdRequest build() {
            return new PutCustomersByCustomerIdRequest(
                customerId,
                detail,
                requestBody);
        }
    }
}

