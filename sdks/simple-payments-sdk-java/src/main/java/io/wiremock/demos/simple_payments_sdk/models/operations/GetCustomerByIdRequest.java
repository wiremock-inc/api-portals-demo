/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.wiremock.demos.simple_payments_sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import io.wiremock.demos.simple_payments_sdk.utils.SpeakeasyMetadata;
import io.wiremock.demos.simple_payments_sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;

public class GetCustomerByIdRequest {

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=customerId")
    private String customerId;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=detail")
    private Detail detail;

    @JsonCreator
    public GetCustomerByIdRequest(
            String customerId,
            Detail detail) {
        Utils.checkNotNull(customerId, "customerId");
        Utils.checkNotNull(detail, "detail");
        this.customerId = customerId;
        this.detail = detail;
    }

    @JsonIgnore
    public String customerId() {
        return customerId;
    }

    @JsonIgnore
    public Detail detail() {
        return detail;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public GetCustomerByIdRequest withCustomerId(String customerId) {
        Utils.checkNotNull(customerId, "customerId");
        this.customerId = customerId;
        return this;
    }

    public GetCustomerByIdRequest withDetail(Detail detail) {
        Utils.checkNotNull(detail, "detail");
        this.detail = detail;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetCustomerByIdRequest other = (GetCustomerByIdRequest) o;
        return 
            java.util.Objects.deepEquals(this.customerId, other.customerId) &&
            java.util.Objects.deepEquals(this.detail, other.detail);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            customerId,
            detail);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetCustomerByIdRequest.class,
                "customerId", customerId,
                "detail", detail);
    }
    
    public final static class Builder {
 
        private String customerId;
 
        private Detail detail;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder customerId(String customerId) {
            Utils.checkNotNull(customerId, "customerId");
            this.customerId = customerId;
            return this;
        }

        public Builder detail(Detail detail) {
            Utils.checkNotNull(detail, "detail");
            this.detail = detail;
            return this;
        }
        
        public GetCustomerByIdRequest build() {
            return new GetCustomerByIdRequest(
                customerId,
                detail);
        }
    }
}

