/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.wiremock.demos.simple_payments_sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import io.wiremock.demos.simple_payments_sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
/**
 * GetChargesByChargeIdResponseBody - Get charges by chargeId. - Get charge by ID
 */

public class GetChargesByChargeIdResponseBody {

    @JsonProperty("id")
    private String id;

    @JsonProperty("amount")
    private int amount;

    @JsonProperty("currency")
    private String currency;

    @JsonProperty("customer")
    private String customer;

    @JsonProperty("created")
    private String created;

    @JsonProperty("status")
    private String status;

    @JsonCreator
    public GetChargesByChargeIdResponseBody(
            @JsonProperty("id") String id,
            @JsonProperty("amount") int amount,
            @JsonProperty("currency") String currency,
            @JsonProperty("customer") String customer,
            @JsonProperty("created") String created,
            @JsonProperty("status") String status) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(customer, "customer");
        Utils.checkNotNull(created, "created");
        Utils.checkNotNull(status, "status");
        this.id = id;
        this.amount = amount;
        this.currency = currency;
        this.customer = customer;
        this.created = created;
        this.status = status;
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    @JsonIgnore
    public int amount() {
        return amount;
    }

    @JsonIgnore
    public String currency() {
        return currency;
    }

    @JsonIgnore
    public String customer() {
        return customer;
    }

    @JsonIgnore
    public String created() {
        return created;
    }

    @JsonIgnore
    public String status() {
        return status;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public GetChargesByChargeIdResponseBody withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public GetChargesByChargeIdResponseBody withAmount(int amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    public GetChargesByChargeIdResponseBody withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    public GetChargesByChargeIdResponseBody withCustomer(String customer) {
        Utils.checkNotNull(customer, "customer");
        this.customer = customer;
        return this;
    }

    public GetChargesByChargeIdResponseBody withCreated(String created) {
        Utils.checkNotNull(created, "created");
        this.created = created;
        return this;
    }

    public GetChargesByChargeIdResponseBody withStatus(String status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetChargesByChargeIdResponseBody other = (GetChargesByChargeIdResponseBody) o;
        return 
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.amount, other.amount) &&
            java.util.Objects.deepEquals(this.currency, other.currency) &&
            java.util.Objects.deepEquals(this.customer, other.customer) &&
            java.util.Objects.deepEquals(this.created, other.created) &&
            java.util.Objects.deepEquals(this.status, other.status);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            id,
            amount,
            currency,
            customer,
            created,
            status);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetChargesByChargeIdResponseBody.class,
                "id", id,
                "amount", amount,
                "currency", currency,
                "customer", customer,
                "created", created,
                "status", status);
    }
    
    public final static class Builder {
 
        private String id;
 
        private Integer amount;
 
        private String currency;
 
        private String customer;
 
        private String created;
 
        private String status;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder amount(int amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        public Builder customer(String customer) {
            Utils.checkNotNull(customer, "customer");
            this.customer = customer;
            return this;
        }

        public Builder created(String created) {
            Utils.checkNotNull(created, "created");
            this.created = created;
            return this;
        }

        public Builder status(String status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }
        
        public GetChargesByChargeIdResponseBody build() {
            return new GetChargesByChargeIdResponseBody(
                id,
                amount,
                currency,
                customer,
                created,
                status);
        }
    }
}

