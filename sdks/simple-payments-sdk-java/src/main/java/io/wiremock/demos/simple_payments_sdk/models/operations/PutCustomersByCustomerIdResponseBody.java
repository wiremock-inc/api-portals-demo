/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.wiremock.demos.simple_payments_sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import io.wiremock.demos.simple_payments_sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;

/**
 * PutCustomersByCustomerIdResponseBody - Update customer
 */

public class PutCustomersByCustomerIdResponseBody {

    @JsonProperty("id")
    private String id;

    @JsonProperty("firstName")
    private String firstName;

    @JsonProperty("lastName")
    private String lastName;

    @JsonCreator
    public PutCustomersByCustomerIdResponseBody(
            @JsonProperty("id") String id,
            @JsonProperty("firstName") String firstName,
            @JsonProperty("lastName") String lastName) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(lastName, "lastName");
        this.id = id;
        this.firstName = firstName;
        this.lastName = lastName;
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    @JsonIgnore
    public String firstName() {
        return firstName;
    }

    @JsonIgnore
    public String lastName() {
        return lastName;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public PutCustomersByCustomerIdResponseBody withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public PutCustomersByCustomerIdResponseBody withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    public PutCustomersByCustomerIdResponseBody withLastName(String lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PutCustomersByCustomerIdResponseBody other = (PutCustomersByCustomerIdResponseBody) o;
        return 
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.firstName, other.firstName) &&
            java.util.Objects.deepEquals(this.lastName, other.lastName);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            id,
            firstName,
            lastName);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PutCustomersByCustomerIdResponseBody.class,
                "id", id,
                "firstName", firstName,
                "lastName", lastName);
    }
    
    public final static class Builder {
 
        private String id;
 
        private String firstName;
 
        private String lastName;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }

        public Builder lastName(String lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }
        
        public PutCustomersByCustomerIdResponseBody build() {
            return new PutCustomersByCustomerIdResponseBody(
                id,
                firstName,
                lastName);
        }
    }
}

