/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.wiremock.demos.simple_payments_sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import io.wiremock.demos.simple_payments_sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;


public class PostChargesRequestBody {

    @JsonProperty("amount")
    private int amount;

    @JsonProperty("currency")
    private String currency;

    @JsonProperty("customerId")
    private String customerId;

    @JsonCreator
    public PostChargesRequestBody(
            @JsonProperty("amount") int amount,
            @JsonProperty("currency") String currency,
            @JsonProperty("customerId") String customerId) {
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(customerId, "customerId");
        this.amount = amount;
        this.currency = currency;
        this.customerId = customerId;
    }

    @JsonIgnore
    public int amount() {
        return amount;
    }

    @JsonIgnore
    public String currency() {
        return currency;
    }

    @JsonIgnore
    public String customerId() {
        return customerId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public PostChargesRequestBody withAmount(int amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    public PostChargesRequestBody withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    public PostChargesRequestBody withCustomerId(String customerId) {
        Utils.checkNotNull(customerId, "customerId");
        this.customerId = customerId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PostChargesRequestBody other = (PostChargesRequestBody) o;
        return 
            java.util.Objects.deepEquals(this.amount, other.amount) &&
            java.util.Objects.deepEquals(this.currency, other.currency) &&
            java.util.Objects.deepEquals(this.customerId, other.customerId);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            amount,
            currency,
            customerId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PostChargesRequestBody.class,
                "amount", amount,
                "currency", currency,
                "customerId", customerId);
    }
    
    public final static class Builder {
 
        private Integer amount;
 
        private String currency;
 
        private String customerId;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder amount(int amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        public Builder customerId(String customerId) {
            Utils.checkNotNull(customerId, "customerId");
            this.customerId = customerId;
            return this;
        }
        
        public PostChargesRequestBody build() {
            return new PostChargesRequestBody(
                amount,
                currency,
                customerId);
        }
    }
}

